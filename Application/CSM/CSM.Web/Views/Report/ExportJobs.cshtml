@model CSM.Web.Models.ExportJobsViewModel
@using CSM.Common.Resources
@using CSM.Common.Utilities
@{
    ViewBag.Title = Resource.Lbl_Report_CommPool;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section MainMenu
{
    @Html.Action("MainMenu", "MenuNavigator", new { selectedMenu = CSM.Entity.MenuCode.Report })
}

@section Breadcrumb {
    <strong class="font-blue">@Html.ActionLink(Resource.Lbl_Reports, "List", "Report", null, new { @class = "font-blue" })</strong>
    <strong class="font-green-jungle">&rsaquo;&rsaquo; @Resource.Lbl_Report_CommPool</strong>
}
<div id="dvForm" class="form-box">
    <h5 class="form-title">@Resource.Lbl_Report_CommPool</h5>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        ชื่อ - นามสกุลลูกค้า
                    </p>
                </div>
                <div class="col-md-9">
                    <div class="clear"></div>
                    <div class="pull-left">
                        @Html.TextBoxFor(model => model.SearchFilter.FirstName, new
                        {
                            @class = "form-control input-sm",
                            @id = "txtFirstName",
                            @style = "width:178px!important"
                        })
                        @Html.ValidationMessageFor(model => model.SearchFilter.FirstName)
                    </div>
                    <div class="pull-left margin-left-5">
                        @Html.TextBoxFor(model => model.SearchFilter.LastName, new
                        {
                            @class = "form-control input-sm",
                            @id = "txtLastName",
                            @style = "width:178px!important"
                        })
                        @Html.ValidationMessageFor(model => model.SearchFilter.LastName)
                    </div>
                    <div class="clear"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Job Status
                    </p>
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.SearchFilter.JobStatus, new SelectList(ViewBag.jobstatus, "Value", "Text"),
                        Resource.Ddl_PleaseSelect, new { @class = "form-control input-sm", @id = "ddlJobStatus" })
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        From
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.FromValue, new { @class = "form-control input-sm", @id = "txtFromValue" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.FromValue)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Attach File
                    </p>
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.SearchFilter.AttachFile, new SelectList(ViewBag.Attachfile, "Value", "Text"),
                        Resource.Ddl_PleaseSelect, new { @class = "form-control input-sm", @id = "ddlAttachfile" })
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Subject
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.Subject, new { @class = "form-control input-sm", @id = "txtSubject" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.Subject)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        SR ID
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.SRId, new
                    {
                        @class = "form-control input-sm",
                        @id = "txtSRId",
                        @maxlength = 20
                    })
                    @Html.ValidationMessageFor(model => model.SearchFilter.SRId)
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Action Branch
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.ActionBranch, new { @class = "form-control input-sm", @id = "txtActionBranch" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.ActionBranch)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Action By
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.ActionBy, new { @class = "form-control input-sm", @id = "txtActionBy" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.ActionBy)
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Owner Branch
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.OwnerBranch, new { @class = "form-control input-sm", @id = "txtOwnerBranch" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.OwnerBranch)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Owner SR
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.OwnerSR, new { @class = "form-control input-sm", @id = "txtOwnerSR" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.OwnerSR)
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Creator Branch
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.CreatorBranch, new { @class = "form-control input-sm", @id = "txtCreatorBranch" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.CreatorBranch)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-control-static">
                        Creator SR
                    </p>
                </div>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.SearchFilter.CreatorSR, new { @class = "form-control input-sm", @id = "txtCreatorSR" })
                    @Html.ValidationMessageFor(model => model.SearchFilter.CreatorSR)
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-group-static">
                        Job Date
                    </p>
                </div>
                <div class="col-md-9">
                    <div class="clear"></div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            <div class='input-group date' id='datetimepicker1'>
                                <input type="text" id="txtJobDateFrom" class="form-control input-small input-sm" onchange="validateDateValue($jq(this));" />
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.SearchFilter.JobDateFrom)
                        </div>
                    </div>
                    <div class="pull-left padding-left-10 padding-right-10 padding-top-5">
                        To.
                    </div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            <div class='input-group date' id='datetimepicker2'>
                                <input type="text" id="txtJobDateTo" class="form-control input-small input-sm" onchange="validateDateValue($jq(this));" />
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.SearchFilter.JobDateTo)
                        </div>
                    </div>
                    <div class="dvJobDateRange clear"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-group-static">
                        Job Time
                    </p>
                </div>
                <div class="col-md-9">
                    <div class="clear"></div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            @Html.TextBoxFor(model => model.SearchFilter.JobTimeFrom,
                            new
                            {
                                @class = "form-control input-sm",
                                @style = "width:160px!important",
                                @id = "txtJobTimeFrom",
                                @onchange = "formatTime($jq(this));",
                                @onpaste = "return validatePaste('Digit');",
                                @onkeypress = " return validateNumber(event);",
                                @placeholder = "กรอกเวลาในรูปแบบ HHmm"
                            })
                            @Html.ValidationMessageFor(model => model.SearchFilter.JobTimeFrom)
                        </div>
                    </div>
                    <div class="pull-left padding-left-10 padding-right-10 padding-top-5">
                        To.
                    </div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            @Html.TextBoxFor(model => model.SearchFilter.JobTimeTo,
                            new
                            {
                                @class = "form-control input-sm",
                                @style = "width:160px!important",
                                @id = "txtJobTimeTo",
                                @onchange = "formatTime($jq(this));",
                                @onpaste = "return validatePaste('Digit');",
                                @onkeypress = " return validateNumber(event);",
                                @placeholder = "กรอกเวลาในรูปแบบ HHmm"
                            })
                            @Html.ValidationMessageFor(model => model.SearchFilter.JobTimeTo)
                        </div>
                    </div>
                    <div class="dvJobTimeRange clear"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-group-static">
                        Action Date
                    </p>
                </div>
                <div class="col-md-9">
                    <div class="clear"></div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            <div class='input-group date' id='datetimepicker3'>
                                <input type="text" id="txtActionDateFrom" class="form-control input-small input-sm" style="width:100px" onchange="validateDateValue($jq(this));" />
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.SearchFilter.ActionDateFrom)
                        </div>
                    </div>
                    <div class="pull-left padding-left-10 padding-right-10 padding-top-5">
                        To.
                    </div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            <div class='input-group date input-small' id='datetimepicker4'>
                                <input type="text" id="txtActionDateTo" class="form-control input-small input-sm" style="width:100px" onchange="validateDateValue($jq(this));" />
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.SearchFilter.ActionDateTo)
                        </div>
                    </div>
                    <div class="dvActionDateRange clear"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3 nopadding">
                    <p class="form-group-static">
                        Action Time
                    </p>
                </div>
                <div class="col-md-9">
                    <div class="clear"></div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            @Html.TextBoxFor(model => model.SearchFilter.ActionTimeFrom,
                            new
                            {
                                @class = "form-control input-sm",
                                @style = "width:160px!important",
                                @id = "txtActionTimeFrom",
                                @onchange = "formatTime($jq(this));",
                                @onpaste = "return validatePaste('Digit');",
                                @onkeypress = " return validateNumber(event);",
                                @placeholder = "กรอกเวลาในรูปแบบ HHmm"
                            })
                            @Html.ValidationMessageFor(model => model.SearchFilter.ActionTimeFrom)
                        </div>
                    </div>
                    <div class="pull-left padding-left-10 padding-right-10 padding-top-5">
                        To.
                    </div>
                    <div class="pull-left form-inline">
                        <div class="form-group">
                            @Html.TextBoxFor(model => model.SearchFilter.ActionTimeTo,
                            new
                            {
                                @class = "form-control input-sm",
                                @style = "width:160px!important",
                                @id = "txtActionTimeTo",
                                @onchange = "formatTime($jq(this));",
                                @onpaste = "return validatePaste('Digit');",
                                @onkeypress = " return validateNumber(event);",
                                @placeholder = "กรอกเวลาในรูปแบบ HHmm"
                            })
                            @Html.ValidationMessageFor(model => model.SearchFilter.ActionTimeTo)
                        </div>
                    </div>
                    <div class="dvActionTimeRange clear"></div>
                </div>
            </div>
        </div>
    </div>

</div>
<div class="clear"></div>
<div class="panel-actions">
    <div class="pull-right">
        <div class="form-inline">
            <div class="form-group">
                <button id="btnExport" type="button" class="btn btn-blue btn-sm btn-xsmall">
                    <i class="fa fa-file-excel-o"></i>&nbsp;Export
                </button>
            </div>
            <div class="form-group">
                <button id="btnReset" type="button" class="btn btn-gray btn-sm btn-xsmall">
                    Clear
                </button>
            </div>
        </div>
    </div>
</div>
<div class="clear"></div>
<div id="dvTarget"></div>
@section masterjs
{
    <script type="text/javascript">
        var searchFilter;
        var successFilter;
        var pageSize = 20;

        $jq(document).ready(function () {
            initializeSearchFilter();
            initDisabledSR(); // waiting remove

            $jq("#dvForm").keypress(function (e) {
                var kCode = e.keyCode || e.charCode; //for cross browser
                if (kCode == 13) {
                    $jq("#btnExport").focus();
                    $jq("#btnExport").click();
                    return false;
                }
            });

            $jq("#btnExport").click(function (e) {
                e.preventDefault();
                clearServerErrors();
                searchFilter.FirstName = $jq("#txtFirstName").val().trim(),
                    searchFilter.LastName = $jq("#txtLastName").val().trim(),
                    searchFilter.JobStatus = $jq("#ddlJobStatus").val(),
                    searchFilter.FromValue = $jq("#txtFromValue").val().trim(),
                    searchFilter.AttachFile = $jq("#ddlAttachfile").val(),
                    searchFilter.Subject = $jq("#txtSubject").val().trim(),
                    searchFilter.ActionBy = $jq("#txtActionBy").val(),
                    searchFilter.ActionBranch = $jq("#txtActionBranch").val(),
                    searchFilter.JobDateFrom = $jq("#txtJobDateFrom").val(),
                    searchFilter.JobDateTo = $jq("#txtJobDateTo").val(),
                    searchFilter.JobTimeFrom = $jq("#txtJobTimeFrom").val(),
                    searchFilter.JobTimeTo = $jq("#txtJobTimeTo").val(),
                    searchFilter.OwnerSR = $jq("#txtOwnerSR").val(),
                    searchFilter.OwnerBranch = $jq("#txtOwnerBranch").val(),
                    searchFilter.ActionDateFrom = $jq("#txtActionDateFrom").val(),
                    searchFilter.ActionDateTo = $jq("#txtActionDateTo").val(),
                    searchFilter.ActionTimeFrom = $jq("#txtActionTimeFrom").val(),
                    searchFilter.ActionTimeTo = $jq("#txtActionTimeTo").val(),
                    searchFilter.CreatorSR = $jq("#txtCreatorSR").val(),
                    searchFilter.CreatorBranch = $jq("#txtCreatorBranch").val(),
                    searchFilter.SRId = $jq("#txtSRId").val().trim(),
                    searchFilter.JobStatusDesc = $jq("#ddlJobStatus option:selected").text(),
                    searchFilter.AttachFileDesc = $jq("#ddlAttachfile option:selected").text(),
                    searchFilter.ActionByName = $jq('#hiddenActionByName').val(),
                    searchFilter.ActionBranchName = $jq('#hiddenActionBranchName').val(),
                    searchFilter.OwnerBranchName = $jq('#hiddenOwnerBranchName').val(),
                    searchFilter.OwnerSRName = $jq('#hiddenOwnerSRName').val(),
                    searchFilter.CreatorBranchName = $jq('#hiddenCreatorBranchName').val(),
                    searchFilter.CreatorSRName = $jq('#hiddenCreatorSRName').val(),
                    searchFilter.PageNo = 1;
                loadExportJobs();
                return false;
            });

            $jq("#btnReset").click(function (e) {
                e.preventDefault();
                //$jq('[id^=datetimepicker]').datepicker("setDate", new Date());
                $jq('#datetimepicker1').datepicker("setDate", (new Date()).toDateString());
                $jq('#datetimepicker2').datepicker("setDate", (new Date()).toDateString());
                $jq('#datetimepicker3').datepicker("setDate", (new Date()).toDateString());
                $jq('#datetimepicker4').datepicker("setDate", (new Date()).toDateString());
                $jq("#dvForm input[type='text'],#dvForm select").val('');
                $jq('#datetimepicker1').datepicker("update");
                $jq('#datetimepicker2').datepicker("update");
                $jq('#datetimepicker3').datepicker("update");
                $jq('#datetimepicker4').datepicker("update");

                $jq("#txtActionBy").select2("val", "");
                $jq("#txtOwnerSR").select2("val", "");
                $jq("#txtCreatorSR").select2("val", "");
                $jq("#txtActionBranch").select2("val", "");
                $jq("#txtOwnerBranch").select2("val", "");
                $jq("#txtCreatorBranch").select2("val", "");

                initDisabledSR(); // waiting remove

                initializeSearchFilter();
                $jq("#dvSearchResult").html('');
                clearServerErrors();
                return false;
            });

            $jq("#txtActionBranch").select2({
                minimumInputLength: '@Constants.MinLenght.AutoComplete',
                placeholder: '@Resource.Ddl_AutoComplete',
                language: "th",
                allowClear: true,
                ajax: {
                    quietMillis: 150,
                    url: '@Url.Action("SearchByBranchName", "Report")',
                    dataType: 'json',
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            userId: $jq('#txtActionBy').val()
                        };
                    },
                    results: function (data, page) {
                        if (data.RedirectUrl != undefined) {
                            topLocation(data.RedirectUrl);
                            return;
                        }
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    },
                    error: function (xhr) {
                        var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                        ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                    }
                }
            });

            $jq("#txtOwnerBranch").select2({
                minimumInputLength: '@Constants.MinLenght.AutoComplete',
                placeholder: '@Resource.Ddl_AutoComplete',
                language: "th",
                allowClear: true,
                ajax: {
                    quietMillis: 150,
                    url: '@Url.Action("SearchByBranchName", "Report")',
                    dataType: 'json',
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            userId: $jq('#txtOwnerSR').val()
                        };
                    },
                    results: function (data, page) {
                        if (data.RedirectUrl != undefined) {
                            topLocation(data.RedirectUrl);
                            return;
                        }
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    },
                    error: function (xhr) {
                        var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                        ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                    }
                }
            });

            $jq("#txtCreatorBranch").select2({
                minimumInputLength: '@Constants.MinLenght.AutoComplete',
                placeholder: '@Resource.Ddl_AutoComplete',
                language: "th",
                allowClear: true,
                ajax: {
                    quietMillis: 150,
                    url: '@Url.Action("SearchByBranchName", "Report")',
                    dataType: 'json',
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            userId: $jq('#txtCreatorSR').val()
                        };
                    },
                    results: function (data, page) {
                        if (data.RedirectUrl != undefined) {
                            topLocation(data.RedirectUrl);
                            return;
                        }
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    },
                    error: function (xhr) {
                        var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                        ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                    }
                }
            });

            var dateFormat = 'dd/mm/yyyy';

            // DateTime Picker From Date
            $jq('#datetimepicker1').datepicker({
                format: dateFormat,
                endDate: "0d",
                orientation: 'auto top',
                showOnFocus: "false",
                language: 'th'
            }).on('changeDate', function (ev) {
                $jq(this).datepicker('hide');
            });

            // DateTime Picker To Date
            $jq('#datetimepicker2').datepicker({
                format: dateFormat,
                endDate: "0d",
                orientation: 'auto top',
                showOnFocus: "false",
                language: 'th'
            }).on('changeDate', function (ev) {
                $jq(this).datepicker('hide');
            });

            // DateTime Picker From Date
            $jq('#datetimepicker3').datepicker({
                format: dateFormat,
                endDate: "0d",
                orientation: 'auto top',
                showOnFocus: "false",
                language: 'th'
            }).on('changeDate', function (ev) {
                $jq(this).datepicker('hide');
            });

            // DateTime Picker To Date
            $jq('#datetimepicker4').datepicker({
                format: dateFormat,
                endDate: "0d",
                orientation: 'auto top',
                showOnFocus: "false",
                language: 'th'
            }).on('changeDate', function (ev) {
                $jq(this).datepicker('hide');
            });
        });

        function initializeSearchFilter() {
            searchFilter = {
                FirstName: $jq("#txtFirstName").val(),
                LastName: $jq("#txtLastName").val(),
                JobStatus: $jq("#ddlJobStatus").val(),
                FromValue: $jq("#txtFromValue").val(),
                AttachFile: $jq("#ddlAttachfile").val(),
                Subject: $jq("#txtSubject").val(),
                ActionBy: $jq("#txtActionBy").val(),
                ActionBranch: $jq("#txtActionBranch").val(),
                JobDateFrom: $jq("#txtJobDateFrom").val(),
                JobDateTo: $jq("#txtJobDateTo").val(),
                JobTimeFrom: $jq("#txtJobTimeFrom").val(),
                JobTimeTo: $jq("#txtJobTimeTo").val(),
                OwnerSR: $jq("#txtOwnerSR").val(),
                OwnerBranch: $jq("#txtOwnerBranch").val(),
                ActionDateFrom: $jq("#txtActionDateFrom").val(),
                ActionDateTo: $jq("#txtActionDateTo").val(),
                ActionTimeFrom: $jq("#txtActionTimeFrom").val(),
                ActionTimeTo: $jq("#txtActionTimeTo").val(),
                CreatorSR: $jq("#txtCreatorSR").val(),
                CreatorBranch: $jq("#txtCreatorBranch").val(),
                SRId: $jq("#txtSRId").val(),
                PageNo: '@Model.SearchFilter.PageNo',
                PageSize: '@Model.SearchFilter.PageSize',
                SortField: '@Model.SearchFilter.SortField',
                SortOrder: '@Model.SearchFilter.SortOrder'
            };
            successFilter = searchFilter;
        };

        function loadData() {
            if (searchFilter.FirstName == ""
                && searchFilter.LastName == ""
                && searchFilter.JobStatus == ""
                && searchFilter.FromValue == ""
                && searchFilter.AttachFile == ""
                && searchFilter.Subject == ""
                && searchFilter.ActionBy == ""
                && searchFilter.ActionBranch == ""
                && searchFilter.JobDateFrom == ""
                && searchFilter.JobDateTo == ""
                && searchFilter.JobTimeFrom == ""
                && searchFilter.JobTimeTo == ""
                && searchFilter.OwnerSR == ""
                && searchFilter.OwnerBranch == ""
                && searchFilter.ActionDateFrom == ""
                && searchFilter.ActionDateTo == ""
                && searchFilter.ActionTimeFrom == ""
                && searchFilter.ActionTimeTo == ""
                && searchFilter.CreatorSR == ""
                && searchFilter.CreatorBranch == ""
                && searchFilter.SRId == ""
                ) {
                var warningMsg = '@Resource.Msg_EnteredAtLeastOneCriteria';
                doModal('dvAlertMsg', 'Message Dialog', warningMsg, '', '');
                return false;
            }

            return false;
        }

        function loadExportJobs() {
            if (searchFilter.FirstName == ""
                && searchFilter.LastName == ""
                && searchFilter.JobStatus == ""
                && searchFilter.FromValue == ""
                && searchFilter.AttachFile == ""
                && searchFilter.Subject == ""
                && searchFilter.ActionBy == ""
                && searchFilter.ActionBranch == ""
                && searchFilter.JobDateFrom == ""
                && searchFilter.JobDateTo == ""
                && searchFilter.JobTimeFrom == ""
                && searchFilter.JobTimeTo == ""
                && searchFilter.OwnerSR == ""
                && searchFilter.OwnerBranch == ""
                && searchFilter.ActionDateFrom == ""
                && searchFilter.ActionDateTo == ""
                && searchFilter.ActionTimeFrom == ""
                && searchFilter.ActionTimeTo == ""
                && searchFilter.CreatorSR == ""
                && searchFilter.CreatorBranch == ""
                && searchFilter.SRId == ""
                ) {
                var warningMsg = '@Resource.Msg_EnteredAtLeastOneCriteria';
                doModal('dvAlertMsg', 'Message Dialog', warningMsg, '', '');
                return false;
            }

            $jq.ajax({
                url: '@Url.Action("LoadJobsExcel", "Report")',
                type: "POST",
                data: addAntiForgeryToken(searchFilter),
                dataType: "json",
                beforeSend: function () { $jq("#dvLoading").show(); },
                complete: function () { $jq("#dvLoading").hide(); },
                success: function (result) {
                    if (result.Valid == true) {
                        var url = '@Url.Action("PrintJobsExcel", "Report")';
                        $jq('#dvTarget').html('');
                        var inputToken = $jq("<input>").attr("type", "hidden").attr("name", "__RequestVerificationToken").val(getAntiForgeryToken());
                        $jq('#dvTarget').append('<form action="' + url + '" method="POST" class="hidden"></form>');
                        $jq('#dvTarget form').append($jq(inputToken));
                        $jq('#dvTarget form').submit();
                        return;
                    } else {
                        showServerErrors(result);
                    }
                    scrollToTop();
                },
                error: function (xhr) {
                    var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                    ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                }
            });
            return false;
        }

        function bindActionBy() {
            $jq("#txtActionBy").select2({
                minimumInputLength: '@Constants.MinLenght.AutoComplete',
                placeholder: '@Resource.Ddl_AutoComplete',
                language: "th",
                allowClear: true,
                ajax: {
                    quietMillis: 150,
                    url: '@Url.Action("SearchByActionName", "Report")',
                    dataType: 'json',
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            branchId: $jq('#txtActionBranch').val()
                        };
                    },
                    results: function (data, page) {
                        if (data.RedirectUrl != undefined) {
                            topLocation(data.RedirectUrl);
                            return;
                        }
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    },
                    error: function (xhr) {
                        var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                        ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                    }
                }
            });
        }

        function bindOwnerSR() {
            $jq("#txtOwnerSR").select2({
                minimumInputLength: '@Constants.MinLenght.AutoComplete',
                placeholder: '@Resource.Ddl_AutoComplete',
                language: "th",
                allowClear: true,
                ajax: {
                    quietMillis: 150,
                    url: '@Url.Action("SearchByActionName", "Report")',
                    dataType: 'json',
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            branchId: $jq("#txtOwnerBranch").val()
                        };
                    },
                    results: function (data, page) {
                        if (data.RedirectUrl != undefined) {
                            topLocation(data.RedirectUrl);
                            return;
                        }
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    },
                    error: function (xhr) {
                        var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                        ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                    }
                }
            });
        }

        function bindCreatorSR() {
            $jq("#txtCreatorSR").select2({
                minimumInputLength: '@Constants.MinLenght.AutoComplete',
                placeholder: '@Resource.Ddl_AutoComplete',
                language: "th",
                allowClear: true,
                ajax: {
                    quietMillis: 150,
                    url: '@Url.Action("SearchByActionName", "Report")',
                    dataType: 'json',
                    data: function (term, page) {
                        return {
                            pageSize: pageSize,
                            pageNum: page,
                            searchTerm: term,
                            branchId: $jq("#txtCreatorBranch").val()
                        };
                    },
                    results: function (data, page) {
                        if (data.RedirectUrl != undefined) {
                            topLocation(data.RedirectUrl);
                            return;
                        }
                        var more = (page * pageSize) < data.Total;
                        return { results: data.Results, more: more };
                    },
                    error: function (xhr) {
                        var handleMsg = '@CSM.Common.Resources.Resource.Error_System';
                        ajaxErrorHandling(xhr, handleMsg, '@FormsAuthentication.LoginUrl', '@Url.Action("AccessDenied", "User")');
                    }
                }
            });
        }

        // ======== waiting remove =======
        function initDisabledSR() {
            $jq("#txtActionBy").prop('disabled', true);
            $jq("#txtOwnerSR").prop('disabled', true);
            $jq("#txtCreatorSR").prop('disabled', true);
            bindActionBy();
            bindOwnerSR();
            bindCreatorSR();

            $jq("#txtActionBranch").change(function (event) {
                if ($jq(this).val() != '') {
                    $jq("#txtActionBy").select2("val", "");
                    $jq("#txtActionBy").prop("disabled", false);
                    bindActionBy();
                }
                else {
                    $jq("#txtActionBy").select2("val", "");
                    $jq("#txtActionBy").prop("disabled", true);
                    bindActionBy();
                }
                return false;
            });

            $jq("#txtOwnerBranch").change(function (event) {
                if ($jq(this).val() != '') {
                    $jq("#txtOwnerSR").select2("val", "");
                    $jq("#txtOwnerSR").prop("disabled", false);
                    bindOwnerSR();
                }
                else {
                    $jq("#txtOwnerSR").select2("val", "");
                    $jq("#txtOwnerSR").prop("disabled", true);
                    bindOwnerSR();
                }
                return false;
            });

            $jq("#txtCreatorBranch").change(function (event) {
                if ($jq(this).val() != '') {
                    $jq("#txtCreatorSR").select2("val", "");
                    $jq("#txtCreatorSR").prop("disabled", false);
                    bindCreatorSR();
                }
                else {
                    $jq("#txtCreatorSR").select2("val", "");
                    $jq("#txtCreatorSR").prop("disabled", true);
                    bindCreatorSR();
                }
                return false;
            });

        }
        // ======== end waiting remove =======
    </script>
}
