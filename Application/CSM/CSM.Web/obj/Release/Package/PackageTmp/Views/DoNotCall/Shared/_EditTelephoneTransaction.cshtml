@model CSM.Entity.DoNotCallByTelephoneEntity
@using CSM.Common.Resources

<div>
    <div id="div_form" class="form-box">
        @Html.HiddenFor(m => m.BasicInfo.TransactionId, new { id = "hidTransactionId" })
        <label class="font-red">@Resource.Lbl_WarningDoNotCallListDisclosure</label>
        <!--Card ID section-->
        <div class="section_panel">
            <strong class="font-blue">@Resource.Lbl_BlockLevelTelephone</strong>
            <div class="row margin-top-15">
                <div class="col-xs-12">
                    <div class="row form-group">
                        <label class="col-sm-1 control-label form-label">@Html.DisplayNameFor(m => m.ContactDetail.Telephone.InputText):</label>
                        <div class="col-sm-4">
                            <input type="text" disabled="disabled" class="form-control input-sm" value="@ViewBag.PhoneNo" />
                        </div>
                        <label class="col-sm-1 control-label form-label text-right">@Html.DisplayNameFor(m => m.ContactDetail.Email.InputText):</label>
                        <div class="col-sm-5">
                            <input type="text" disabled="disabled" class="form-control input-sm" value="@ViewBag.Email" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="section_borderless_panel">
            <div class="padding-left-15">
                <div class="row form-group">
                    <label class="col-sm-2 col-md-1 control-label form-label">@Html.DisplayNameFor(m => m.CardInfo.CardNo): </label>
                    <div class="col-sm-4 col-md-3">
                        @Html.TextBoxFor(m => m.CardInfo.CardNo, new { @class = "form-control input-sm", id = "txtCardNo" })
                        @Html.ValidationMessageFor(m => m.CardInfo.CardNo)
                    </div>
                    <label class="col-sm-2 col-md-2 control-label form-label text-right">
                        @Html.DisplayNameFor(m => m.CardInfo.SubscriptionTypeId):
                    </label>
                    <div class="col-sm-4 col-md-3 nopadding">
                        @Html.DropDownListFor(model => model.CardInfo.SubscriptionTypeId, new List<SelectListItem>(ViewBag.SubscriptionTypeList), Resource.Ddl_PleaseSelect, new { @class = "form-control input-sm", @id = "ddlSubscriptionType" })
                        @Html.Hidden("SubscriptionTypeId")
                        @Html.ValidationMessage("SubscriptionTypeId")
                    </div>
                </div>
                <div class="row form-group">
                    <label class="col-sm-2 col-md-1 control-label form-label">
                        @Html.DisplayNameFor(m => m.BasicInfo.FirstName):
                        <span id="reqFirstName" class="required-field-block">*</span>
                    </label>
                    <div class="col-sm-4">
                        @Html.TextBoxFor(m => m.BasicInfo.FirstName, new { id = "txtFirstName", @class = "form-control input-sm" })
                        @Html.ValidationMessageFor(m => m.BasicInfo.FirstName)
                    </div>
                </div>
                <div class="row form-group">
                    <label class="col-sm-2 col-md-1 control-label form-label">@Html.DisplayNameFor(m => m.BasicInfo.LastName):</label>
                    <div class="col-sm-4">
                        @Html.TextBoxFor(m => m.BasicInfo.LastName, new { id = "txtLastName", @class = "form-control input-sm" })
                        @Html.ValidationMessageFor(m => m.BasicInfo.LastName)
                    </div>
                </div>
            </div>
        </div>
        @{
            <div>
                @Html.HiddenFor(m => m.HasBlockItems)
                <label class="font-red">
                    @Html.ValidationMessageFor(m => m.HasBlockItems)
                </label>
            </div>
            Html.RenderPartial("~/Views/DoNotCall/Shared/_BlockSalesSection.cshtml", Model.BlockSales);
            Html.RenderPartial("~/Views/DoNotCall/Shared/_BlockInformationSection.cshtml", Model.BlockInformation);
            Html.RenderPartial("~/Views/DoNotCall/Shared/_TelephoneSection.cshtml", Model.ContactDetail.Telephone);
            Html.RenderPartial("~/Views/DoNotCall/Shared/_EmailSection.cshtml", Model.ContactDetail.Email);
            Html.RenderPartial("~/Views/DoNotCall/Shared/_BasicInfoSection.cshtml", Model.BasicInfo);
        }
        @{
            if (Model.BasicInfo.TransactionId > 0)
            {
                Html.RenderPartial("~/Views/DoNotCall/Shared/_HistoryDoNotCall.cshtml");
            }
        }
        <!--Submit Buttons section-->
        @{Html.RenderPartial("~/Views/DoNotCall/Shared/_SubmitButtonsSection.cshtml"); }
    </div>
</div>

@Scripts.Render("~/Scripts/DoNotCallBlock.js")
<script>
    var emailList = [];
    var phoneList = [];
    var url_SavePhone = '@Url.Action("SavePhone", "DoNotCall")';
    var url_SearchDoNotCall = '@Url.Action("Search", "DoNotCall")';
    var url_AutoCompleteSearchProductWithExceptions = "@Url.Action("AutoCompleteSearchProductWithExceptions", "AutoComplete")";
    var autoCompletePlaceHolder = '@Resource.Ddl_AutoComplete';
    var autoCompleteMinLength = '@CSM.Common.Utilities.Constants.MinLenght.AutoComplete';

    function onCancel() {
        window.location = url_SearchDoNotCall;
    }

    function onSave() {
        clearServerErrors();
        callAjaxJsonAntiForgery(url_SavePhone, "post", getData(), onSaveSuccess);
    }

    function getData() {
        var isNeverExpire = $jq("#chkNeverExpire").prop("checked");
        var expireDate = isNeverExpire ? new Date(@ViewBag.NeverExpireYear, @ViewBag.NeverExpireMonth - 1, @ViewBag.NeverExpireDay)  : $jq("#dvExpireDate").datepicker('getDate');
        return {
            CardInfo: {
                CardNo: $jq("#txtCardNo").val(),
                SubscriptionTypeId: $jq("#ddlSubscriptionType").val(),
            },
            BasicInfo: {
                TransactionId: $jq("#hidTransactionId").val(),
                FirstName: $jq("#txtFirstName").val(),
                LastName: $jq("#txtLastName").val(),
                EffectiveDate: $jq("#dvEffectiveDate").datepicker('getDate'),
                ExpireDate: expireDate.toISOString(),
                CreateDate: $jq("#hidCreateDate").val(),
                UpdateDate: $jq("#hidUpdateDate").val(),
                Remark: $jq("#txtRemark").val(),
                IsNeverExpire: isNeverExpire
            },
            BlockInformation: {
                IsBlockInfoEmail: $jq("#chkIsBlockInformationEmail").prop("checked"),
                IsBlockInfoTelephone: $jq("#chkIsBlockInformationTelephone").prop("checked"),
                IsBlockInfoSms: $jq("#chkIsBlockInformationSms").prop("checked"),
                IsBlockAllInfoProducts: $jq("#chkIsBlockAllInformationProducts").prop("checked"),
                BlockInfoProductList: blockInformationProductList,

            },
            BlockSales: {
                IsBlockSalesEmail: $jq("#chkIsBlockSalesEmail").prop("checked"),
                IsBlockSalesTelephone: $jq("#chkIsBlockSalesTelephone").prop("checked"),
                IsBlockSalesSms: $jq("#chkIsBlockSalesSms").prop("checked"),
                IsBlockAllSalesProducts: $jq("#chkIsBlockAllSalesProducts").prop("checked"),
                BlockSalesProductList: blockSalesProductList
            },
            ContactDetail: {
                Email: {
                    EmailList: emailList,
                },
                Telephone: {
                    TelephoneList: phoneList
                }
            }
        };
    }
</script>