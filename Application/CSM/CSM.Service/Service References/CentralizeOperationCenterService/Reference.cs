//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSM.Service.CentralizeOperationCenterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Header", Namespace="http://schemas.datacontract.org/2004/07/COCS.Service")]
    [System.SerializableAttribute()]
    public partial class Header : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelID {
            get {
                return this.ChannelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelIDField, value) != true)) {
                    this.ChannelIDField = value;
                    this.RaisePropertyChanged("ChannelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string System {
            get {
                return this.SystemField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemField, value) != true)) {
                    this.SystemField = value;
                    this.RaisePropertyChanged("System");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CentralizeOperationCenterService.IService")]
    public interface IService {
        
        // CODEGEN: Generating message contract since the wrapper name (ServiceRequest) of message ServiceRequest does not match the default value (RetrieveLead)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RetrieveLead", ReplyAction="http://tempuri.org/IService/RetrieveLeadResponse")]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse RetrieveLead(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RetrieveLead", ReplyAction="http://tempuri.org/IService/RetrieveLeadResponse")]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> RetrieveLeadAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (ServiceRequest) of message ServiceRequest does not match the default value (GetLeadListByEmpCode)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLeadListByEmpCode", ReplyAction="http://tempuri.org/IService/GetLeadListByEmpCodeResponse")]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse GetLeadListByEmpCode(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLeadListByEmpCode", ReplyAction="http://tempuri.org/IService/GetLeadListByEmpCodeResponse")]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> GetLeadListByEmpCodeAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (ServiceRequest) of message ServiceRequest does not match the default value (ReceiveLead)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveLead", ReplyAction="http://tempuri.org/IService/ReceiveLeadResponse")]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse ReceiveLead(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveLead", ReplyAction="http://tempuri.org/IService/ReceiveLeadResponse")]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> ReceiveLeadAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (ServiceRequest) of message ServiceRequest does not match the default value (SetAvailableUser)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetAvailableUser", ReplyAction="http://tempuri.org/IService/SetAvailableUserResponse")]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse SetAvailableUser(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetAvailableUser", ReplyAction="http://tempuri.org/IService/SetAvailableUserResponse")]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> SetAvailableUserAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (ServiceRequest) of message ServiceRequest does not match the default value (SearchLead)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchLead", ReplyAction="http://tempuri.org/IService/SearchLeadResponse")]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse SearchLead(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchLead", ReplyAction="http://tempuri.org/IService/SearchLeadResponse")]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> SearchLeadAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ServiceRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public CSM.Service.CentralizeOperationCenterService.Header RequestHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string RequestXml;
        
        public ServiceRequest() {
        }
        
        public ServiceRequest(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml) {
            this.RequestHeader = RequestHeader;
            this.RequestXml = RequestXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ServiceResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public CSM.Service.CentralizeOperationCenterService.Header ResponseHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string ResponseXml;
        
        public ServiceResponse() {
        }
        
        public ServiceResponse(CSM.Service.CentralizeOperationCenterService.Header ResponseHeader, string ResponseXml) {
            this.ResponseHeader = ResponseHeader;
            this.ResponseXml = ResponseXml;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : CSM.Service.CentralizeOperationCenterService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<CSM.Service.CentralizeOperationCenterService.IService>, CSM.Service.CentralizeOperationCenterService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse CSM.Service.CentralizeOperationCenterService.IService.RetrieveLead(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.RetrieveLead(request);
        }
        
        public CSM.Service.CentralizeOperationCenterService.Header RetrieveLead(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml, out string ResponseXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            CSM.Service.CentralizeOperationCenterService.ServiceResponse retVal = ((CSM.Service.CentralizeOperationCenterService.IService)(this)).RetrieveLead(inValue);
            ResponseXml = retVal.ResponseXml;
            return retVal.ResponseHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> CSM.Service.CentralizeOperationCenterService.IService.RetrieveLeadAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.RetrieveLeadAsync(request);
        }
        
        public System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> RetrieveLeadAsync(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            return ((CSM.Service.CentralizeOperationCenterService.IService)(this)).RetrieveLeadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse CSM.Service.CentralizeOperationCenterService.IService.GetLeadListByEmpCode(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.GetLeadListByEmpCode(request);
        }
        
        public CSM.Service.CentralizeOperationCenterService.Header GetLeadListByEmpCode(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml, out string ResponseXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            CSM.Service.CentralizeOperationCenterService.ServiceResponse retVal = ((CSM.Service.CentralizeOperationCenterService.IService)(this)).GetLeadListByEmpCode(inValue);
            ResponseXml = retVal.ResponseXml;
            return retVal.ResponseHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> CSM.Service.CentralizeOperationCenterService.IService.GetLeadListByEmpCodeAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.GetLeadListByEmpCodeAsync(request);
        }
        
        public System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> GetLeadListByEmpCodeAsync(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            return ((CSM.Service.CentralizeOperationCenterService.IService)(this)).GetLeadListByEmpCodeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse CSM.Service.CentralizeOperationCenterService.IService.ReceiveLead(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.ReceiveLead(request);
        }
        
        public CSM.Service.CentralizeOperationCenterService.Header ReceiveLead(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml, out string ResponseXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            CSM.Service.CentralizeOperationCenterService.ServiceResponse retVal = ((CSM.Service.CentralizeOperationCenterService.IService)(this)).ReceiveLead(inValue);
            ResponseXml = retVal.ResponseXml;
            return retVal.ResponseHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> CSM.Service.CentralizeOperationCenterService.IService.ReceiveLeadAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.ReceiveLeadAsync(request);
        }
        
        public System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> ReceiveLeadAsync(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            return ((CSM.Service.CentralizeOperationCenterService.IService)(this)).ReceiveLeadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse CSM.Service.CentralizeOperationCenterService.IService.SetAvailableUser(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.SetAvailableUser(request);
        }
        
        public CSM.Service.CentralizeOperationCenterService.Header SetAvailableUser(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml, out string ResponseXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            CSM.Service.CentralizeOperationCenterService.ServiceResponse retVal = ((CSM.Service.CentralizeOperationCenterService.IService)(this)).SetAvailableUser(inValue);
            ResponseXml = retVal.ResponseXml;
            return retVal.ResponseHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> CSM.Service.CentralizeOperationCenterService.IService.SetAvailableUserAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.SetAvailableUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> SetAvailableUserAsync(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            return ((CSM.Service.CentralizeOperationCenterService.IService)(this)).SetAvailableUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CSM.Service.CentralizeOperationCenterService.ServiceResponse CSM.Service.CentralizeOperationCenterService.IService.SearchLead(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.SearchLead(request);
        }
        
        public CSM.Service.CentralizeOperationCenterService.Header SearchLead(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml, out string ResponseXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            CSM.Service.CentralizeOperationCenterService.ServiceResponse retVal = ((CSM.Service.CentralizeOperationCenterService.IService)(this)).SearchLead(inValue);
            ResponseXml = retVal.ResponseXml;
            return retVal.ResponseHeader;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> CSM.Service.CentralizeOperationCenterService.IService.SearchLeadAsync(CSM.Service.CentralizeOperationCenterService.ServiceRequest request) {
            return base.Channel.SearchLeadAsync(request);
        }
        
        public System.Threading.Tasks.Task<CSM.Service.CentralizeOperationCenterService.ServiceResponse> SearchLeadAsync(CSM.Service.CentralizeOperationCenterService.Header RequestHeader, string RequestXml) {
            CSM.Service.CentralizeOperationCenterService.ServiceRequest inValue = new CSM.Service.CentralizeOperationCenterService.ServiceRequest();
            inValue.RequestHeader = RequestHeader;
            inValue.RequestXml = RequestXml;
            return ((CSM.Service.CentralizeOperationCenterService.IService)(this)).SearchLeadAsync(inValue);
        }
    }
}
